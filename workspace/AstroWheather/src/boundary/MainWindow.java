package boundary;

import entity.Forecast;
import entity.Scale;
import java.awt.Image;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JSpinner;
import javax.swing.table.DefaultTableModel;

/**
 * Presents a table to aquire the temperatures on a selected scale.
 * <br>
 * <br>
 * The table lists the known temperatures up to the day before today. Today's
 * value can be changed in order to move the interval of the temperatures.
 * <br>
 * <br>
 * The rows in the table represents a temperature along with it's scale. These
 * rows can be moved, added to the end of the table and deleted. The scale of
 * the temperature is one of these: Celsius(C), Fahrenheit(F), Kelvin(K) and
 * Rankine(R).
 * <br>
 * <br>
 * When the number of temperatures is bigger than or equals to five (5) the
 * Results get updated.
 * <p/>
 * @author Andrés Sarmiento Tobón <ansarmientoto@unal.edu.co>
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow in the center of the window.
     */
    public MainWindow() {
        initComponents();
        setLocationRelativeTo(null);
        tablePastTemperatures.setRowHeight(32);

        try {
            Image image = ImageIO.read(MainWindow.class.getResource(
                    "/boundary/weather.png"));
            setIconImage(image);
        } catch (IOException ex) {
        }
    }

    /**
     * Set L&F early to prevent inconsistencies.
     */
    static {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info
                    : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    }
    
    /**
     * List of scales to select from, at the table.
     */
    public static final javax.swing.DefaultCellEditor SCALES_EDITOR =
            new javax.swing.DefaultCellEditor(new javax.swing.JComboBox<>(
            new String[] {
        "°C (Celsius)",
        "°F (Fahrenheit)",
        "°K (Kelvin)",
        "°R (Rankine)"
    }));
    /**
     * One (1) if the year is Leap, zero (0) otherwise.
     */
    private int leapYear;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackground = new javax.swing.JPanel();
        scrollPaneInputTable = new javax.swing.JScrollPane();
        tablePastTemperatures = new javax.swing.JTable();
        panelToday = new javax.swing.JPanel();
        spinnerDay = new javax.swing.JSpinner();
        comboBoxMonth = new javax.swing.JComboBox();
        spinnerYear = new javax.swing.JSpinner();
        buttonAdd = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonUp = new javax.swing.JButton();
        buttonDown = new javax.swing.JButton();
        buttonCalculate = new javax.swing.JButton();
        checkBoxUpdate = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Astrological Weather");
        setMaximizedBounds(new java.awt.Rectangle(730, 530, 530, 530));
        setMinimumSize(new java.awt.Dimension(730, 530));
        setResizable(false);

        panelBackground.setBackground(new java.awt.Color(253, 253, 253));

        tablePastTemperatures.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        tablePastTemperatures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Scale", "Temperature"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablePastTemperatures.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tablePastTemperaturesChange(evt);
            }
        });
        scrollPaneInputTable.setViewportView(tablePastTemperatures);
        tablePastTemperatures.getColumnModel().getColumn(0).setCellEditor(SCALES_EDITOR);
        tablePastTemperatures.getTableHeader().setFont(new java.awt.Font("Ubuntu Light", 0, 24));

        panelToday.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Today", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu Light", 0, 24))); // NOI18N
        panelToday.setForeground(new java.awt.Color(0, 0, 0));
        panelToday.setOpaque(false);

        spinnerDay.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        spinnerDay.setValue(1);
        spinnerDay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerDayChanged(evt);
            }
        });

        comboBoxMonth.setBackground(new java.awt.Color(255, 255, 255));
        comboBoxMonth.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        comboBoxMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        comboBoxMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monthSelectionChanged(evt);
            }
        });

        spinnerYear.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        spinnerYear.setValue(Integer.valueOf(2013));
        spinnerYear.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerYearChanged(evt);
            }
        });

        javax.swing.GroupLayout panelTodayLayout = new javax.swing.GroupLayout(panelToday);
        panelToday.setLayout(panelTodayLayout);
        panelTodayLayout.setHorizontalGroup(
            panelTodayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTodayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spinnerDay, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(spinnerYear, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTodayLayout.setVerticalGroup(
            panelTodayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTodayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTodayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTodayLayout.createSequentialGroup()
                        .addComponent(spinnerYear)
                        .addContainerGap())
                    .addGroup(panelTodayLayout.createSequentialGroup()
                        .addGroup(panelTodayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(spinnerDay, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxMonth, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(12, 12, 12))))
        );

        buttonAdd.setBackground(new java.awt.Color(255, 255, 255));
        buttonAdd.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        buttonAdd.setForeground(new java.awt.Color(0, 0, 0));
        buttonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/boundary/add.png"))); // NOI18N
        buttonAdd.setText("Add");
        buttonAdd.setMaximumSize(new java.awt.Dimension(165, 42));
        buttonAdd.setMinimumSize(new java.awt.Dimension(165, 42));
        buttonAdd.setPreferredSize(new java.awt.Dimension(165, 42));
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        buttonDelete.setBackground(new java.awt.Color(255, 255, 255));
        buttonDelete.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        buttonDelete.setForeground(new java.awt.Color(0, 0, 0));
        buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/boundary/delete.png"))); // NOI18N
        buttonDelete.setText("Delete");
        buttonDelete.setMaximumSize(new java.awt.Dimension(165, 42));
        buttonDelete.setMinimumSize(new java.awt.Dimension(165, 42));
        buttonDelete.setPreferredSize(new java.awt.Dimension(165, 42));
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActinPerformed(evt);
            }
        });

        buttonUp.setBackground(new java.awt.Color(255, 255, 255));
        buttonUp.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        buttonUp.setForeground(new java.awt.Color(0, 0, 0));
        buttonUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/boundary/up.png"))); // NOI18N
        buttonUp.setText("Up");
        buttonUp.setMaximumSize(new java.awt.Dimension(165, 42));
        buttonUp.setMinimumSize(new java.awt.Dimension(165, 42));
        buttonUp.setPreferredSize(new java.awt.Dimension(165, 42));
        buttonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upActionPerformed(evt);
            }
        });

        buttonDown.setBackground(new java.awt.Color(255, 255, 255));
        buttonDown.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        buttonDown.setForeground(new java.awt.Color(0, 0, 0));
        buttonDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/boundary/down.png"))); // NOI18N
        buttonDown.setText("Down");
        buttonDown.setMaximumSize(new java.awt.Dimension(165, 42));
        buttonDown.setMinimumSize(new java.awt.Dimension(165, 42));
        buttonDown.setPreferredSize(new java.awt.Dimension(165, 42));
        buttonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downActionPerformed(evt);
            }
        });

        buttonCalculate.setBackground(new java.awt.Color(255, 255, 255));
        buttonCalculate.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        buttonCalculate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/boundary/forecasting.png"))); // NOI18N
        buttonCalculate.setText("Calculate");
        buttonCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCalculate(evt);
            }
        });

        checkBoxUpdate.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        checkBoxUpdate.setForeground(new java.awt.Color(0, 0, 0));
        checkBoxUpdate.setText("Enable Automatic Forecasting");
        checkBoxUpdate.setIconTextGap(24);
        checkBoxUpdate.setOpaque(false);

        javax.swing.GroupLayout panelBackgroundLayout = new javax.swing.GroupLayout(panelBackground);
        panelBackground.setLayout(panelBackgroundLayout);
        panelBackgroundLayout.setHorizontalGroup(
            panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBackgroundLayout.createSequentialGroup()
                        .addGroup(panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(scrollPaneInputTable))
                    .addGroup(panelBackgroundLayout.createSequentialGroup()
                        .addGroup(panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelToday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelBackgroundLayout.createSequentialGroup()
                                .addComponent(buttonCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(checkBoxUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelBackgroundLayout.setVerticalGroup(
            panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelToday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonCalculate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkBoxUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelBackgroundLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(scrollPaneInputTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(panelBackgroundLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(buttonUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(buttonDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Appends an empty row in the table.
     * <p/>
     * @param evt unused parameter.
     */
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        javax.swing.table.DefaultTableModel tableModel =
                (javax.swing.table.DefaultTableModel) tablePastTemperatures.
                getModel();
        tableModel.addRow(new Object[0]);
    }//GEN-LAST:event_addActionPerformed

    /**
     * Deletes a row in the table.
     * <br>
     * If the table is empty it does nothing.
     * <p/>
     * @param evt unused parameter.
     */
    private void deleteActinPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActinPerformed
        javax.swing.table.DefaultTableModel tableModel =
                (javax.swing.table.DefaultTableModel) tablePastTemperatures.
                getModel();
        int selectedRow = tablePastTemperatures.getSelectedRow();
        int selectedColumn = tablePastTemperatures.getSelectedColumn();

        if (selectedRow >= 0 && selectedColumn >= 0) {
            tableModel.removeRow(selectedRow);

            if (tableModel.getRowCount() > 0) {
                tablePastTemperatures.setColumnSelectionInterval(selectedColumn,
                        selectedColumn);

                int newSelectedRow = Math.min(tableModel.getRowCount() - 1,
                        selectedRow);
                tablePastTemperatures.setRowSelectionInterval(newSelectedRow,
                        newSelectedRow);

            }
        }
    }//GEN-LAST:event_deleteActinPerformed

    /**
     * Moves up the selected row in the table.
     * <br>
     * If the first row is selected or if the table is empty, it does nothing.
     * <p/>
     * @param evt unused parameter.
     */
    private void upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upActionPerformed
        javax.swing.table.DefaultTableModel tableModel =
                (javax.swing.table.DefaultTableModel) tablePastTemperatures
                .getModel();
        int selectedRow = tablePastTemperatures.getSelectedRow();
        int selectedColumn = tablePastTemperatures.getSelectedColumn();

        if (selectedRow > 0 && selectedColumn >= 0) {
            tableModel.moveRow(selectedRow, selectedRow, selectedRow - 1);

            if (tableModel.getRowCount() > 0) {
                tablePastTemperatures.setColumnSelectionInterval(selectedColumn,
                        selectedColumn);

                int newSelectedRow = selectedRow - 1;
                tablePastTemperatures.setRowSelectionInterval(newSelectedRow,
                        newSelectedRow);

            }
        }
    }//GEN-LAST:event_upActionPerformed

    /**
     * Moves down the selected row in the table.
     * <br>
     * If the last row is selected or if the table is empty, it does nothing.
     * <p/>
     * @param evt unused parameter.
     */
    private void downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downActionPerformed
        javax.swing.table.DefaultTableModel tableModel =
                (javax.swing.table.DefaultTableModel) tablePastTemperatures
                .getModel();
        int selectedRow = tablePastTemperatures.getSelectedRow();
        int selectedColumn = tablePastTemperatures.getSelectedColumn();

        if (selectedRow >= 0 && selectedRow < tableModel.getRowCount() - 1 &&
                 selectedColumn >= 0) {
            tableModel.moveRow(selectedRow, selectedRow, selectedRow + 1);

            if (tableModel.getRowCount() > 0) {
                tablePastTemperatures.setColumnSelectionInterval(selectedColumn,
                        selectedColumn);

                int newSelectedRow = selectedRow + 1;
                tablePastTemperatures.setRowSelectionInterval(newSelectedRow,
                        newSelectedRow);

            }
        }
    }//GEN-LAST:event_downActionPerformed

    /**
     * Ensures that the day corresponds to the defined days in the month.
     * <p/>
     * @param evt unused parameter.
     */
    private void spinnerDayChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerDayChanged
        checkMonthDay();
    }//GEN-LAST:event_spinnerDayChanged

    /**
     * Updates the value of the leap integer and the day when year changes.
     * <p/>
     * @param evt unused parameter.
     */
    private void spinnerYearChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerYearChanged
        leapYear = leapYear((int) spinnerYear.getValue());
        checkMonthDay();
    }//GEN-LAST:event_spinnerYearChanged

    /**
     * Updates the value of the day when month changes.
     * <p/>
     * @param evt unused parameter.
     */
    private void monthSelectionChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monthSelectionChanged
        checkMonthDay();
    }//GEN-LAST:event_monthSelectionChanged

    /**
     * Updates the results when a value in the table changes.
     * <p/>
     * @param evt unused parameter.
     */
    private void tablePastTemperaturesChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tablePastTemperaturesChange
        if (checkBoxUpdate.isSelected()) {
            processInput();
            toFront();
            repaint();
        }
    }//GEN-LAST:event_tablePastTemperaturesChange

    /**
     * Process the input (table) when the user clicks the button to generate the
     * forecast.
     * <p/>
     * @param evt unused
     */
    private void buttonCalculate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCalculate
        processInput();
    }//GEN-LAST:event_buttonCalculate

    /**
     * Tests if a year is leap, it doesn't check for negative years.
     * <p/>
     * @param year the to test
     * <p/>
     * @return one (1) if year is leap, zero (0) otherwise.
     */
    public static int leapYear(int year) {
        if (year % 400 == 0) {
            return 1;
        } else if (year % 100 == 0) {
            return 0;
        } else if (year % 4 == 0) {
            return 1;
        } else {
            return 0;
        }
    }

    /**
     * Main method of the app.
     * <br>
     * Starts a mainWindow and displays it.
     * <p/>
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonCalculate;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonDown;
    private javax.swing.JButton buttonUp;
    private javax.swing.JCheckBox checkBoxUpdate;
    private javax.swing.JComboBox comboBoxMonth;
    private javax.swing.JPanel panelBackground;
    private javax.swing.JPanel panelToday;
    private javax.swing.JScrollPane scrollPaneInputTable;
    private javax.swing.JSpinner spinnerDay;
    private javax.swing.JSpinner spinnerYear;
    private javax.swing.JTable tablePastTemperatures;
    // End of variables declaration//GEN-END:variables

    /**
     * Ensures that the day corresponds to the defined days in the month.
     */
    private void checkMonthDay() {
        int dayNumber = (int) spinnerDay.getValue();

        if (dayNumber < 1) {
            spinnerDay.setValue(1);
        } else {
            switch (comboBoxMonth.getSelectedIndex()) {
                case -1:
                    break;
                case 0:
                case 2:
                case 4:
                case 6:
                case 7:
                case 9:
                case 11:
                    if (dayNumber > 31) {
                        spinnerDay.setValue(31);
                    }

                    break;
                case 1:
                    if (dayNumber > 28 + leapYear) {
                        spinnerDay.setValue(28 + leapYear);
                    }

                    break;
                default:
                    if (dayNumber > 30) {
                        spinnerDay.setValue(30);
                    }

                    break;
            }
        }
    }

    /**
     * Process row by row the table to generate the temperature with their own
     * <b><code>Scale</code></b> and <b><code>Date</code></b>.
     */
    private void processInput() {
        try {
            if (tablePastTemperatures.getRowCount() >= 5) {
                int year = Integer.parseInt(spinnerYear.getValue().toString());
                int month = comboBoxMonth.getSelectedIndex();
                int day = Integer.parseInt(spinnerDay.getValue().toString());


                if (month < 0 || month > 11) {
                    throw new Exception();
                }

                GregorianCalendar todayCalendar = new GregorianCalendar(year,
                        month, day);
                Date today = todayCalendar.getTime();

                List<Forecast> forecasts = new LinkedList<>();

                for (int i = tablePastTemperatures.getRowCount() - 1; i >= 0;
                        i--) {
                    Date date = (Date) todayCalendar.getTime().clone();
                    forecasts.add(0, processRow(i, date));
                    todayCalendar.add(GregorianCalendar.DAY_OF_YEAR, -1);
                }

                control.ControlAlgorithm.generateForecast(today, forecasts);
            }
        } catch (Exception ex) {
        }
    }

    /**
     * Turn the temperature in the row to Kelvin and creates a
     * <code>Forecast</code> along with the
     * <code>date</code>.
     * <p/>
     * @param date The date of the temperature.
     * @param row  The number of the 0-based row in the table.
     * <p/>
     * @return A <code>Forecast</code> object with the temperature and the
     *         <code>date</code>.
     */
    private Forecast processRow(int row, Date date) {
        if (row >= 0 && row < tablePastTemperatures.getRowCount()) {
            Object[] forecastRow = new Object[2];
            double temperature = -1000;
            String scale = "";
            Scale theScale;

            ((java.util.Vector) ((DefaultTableModel) tablePastTemperatures.
                    getModel()).getDataVector().elementAt(row)).copyInto(
                    forecastRow);

            for (int i = 0; i < 2; i++) {
                if (forecastRow[i] instanceof Number) {
                    temperature = ((Double) forecastRow[i]).doubleValue();
                } else {
                    scale = (String) forecastRow[i];
                }
            }

            //If a row it's not completely filled
            if (temperature <= -1000) {
                throw new IllegalStateException();
            }

            switch (scale) {
                case "°C (Celsius)": //convert Celsius to Kelvin
                    temperature += 273.15;
                    theScale = Scale.CELSIUS;
                    break;
                case "°F (Fahrenheit)": //convert Fahrenheit to Kelvin
                    temperature = (temperature + 459.67) * 5.0 / 9.0;
                    theScale = Scale.FAHRENHEIT;
                    break;
                case "°K (Kelvin)": //Do nothing
                    theScale = Scale.KELVIN;
                    break;
                case "°R (Rankine)": //convert Rankine to Kelvin
                    temperature *= 5.0 / 9.0;
                    theScale = Scale.RANKINE;
                    break;
                default:
                    throw new IllegalStateException();
            }

            return new Forecast(date, temperature, theScale);
        } else {
            throw new IllegalStateException();
        }
    }
}
