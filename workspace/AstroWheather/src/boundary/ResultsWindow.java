package boundary;

import control.ControlPrint;
import entity.Forecast;
import entity.Scale;
import static entity.Scale.CELSIUS;
import static entity.Scale.FAHRENHEIT;
import static entity.Scale.KELVIN;
import static entity.Scale.RANKINE;
import java.awt.Image;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 * Displays a table and a graph with the forecasts.
 * <br>
 * <br>
 * The graph is displayed in a tab and the table is displayed in another tab.
 * The graph plots the predicted temperatures versus dates.
 * <br>
 * <br>
 * The table also displays the error in the predictions.
 * <br>
 * <br>
 * Finally, the program can print to a file the graph, the table and the error
 * of the calculations.
 * <br>
 * <br>
 * This class uses the Open-Sourced library JFreeChart(R).
 * <p/>
 * @author Andrés Sarmiento Tobón <ansarmientoto@unal.edu.co>
 */
public class ResultsWindow extends javax.swing.JFrame {

    /**
     * The error shown by the most accurate algorithm.
     */
    private double dataDispertion;
    /**
     * The result given by the most accurate algorithm.
     */
    private List<Forecast> result;
    /**
     * Temperatures and dates given by the user.
     */
    private List<Forecast> dataList;
    /**
     * The data for the JFreeChart.
     */
    private XYSeriesCollection series;
    /**
     * The chart that contains the plot and the titles.
     */
    private JFreeChart temperaturePlot;

    /**
     * Creates new form ResultsWindow in the center of the window.
     */
    public ResultsWindow() {
        series = new XYSeriesCollection();
        temperaturePlot = ChartFactory.createXYLineChart("Temperatures",
                "Dates", "Temperature (°K)", series, PlotOrientation.VERTICAL,
                true, true, false);

        initComponents();
        setLocationRelativeTo(null);
        tableResults.setRowHeight(32);
        tableResults.getTableHeader().setReorderingAllowed(false);

        try {
            Image image = ImageIO.read(MainWindow.class.getResource(
                    "/boundary/weather.png"));
            setIconImage(image);
        } catch (IOException ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackground = new javax.swing.JPanel();
        tabbedPane1Background = new javax.swing.JTabbedPane();
        panelPlot = new javax.swing.JPanel();
        chartPanel = new ChartPanel(temperaturePlot);
        panelTable = new javax.swing.JPanel();
        tableScrollPaneOutput = new javax.swing.JScrollPane();
        tableResults = new javax.swing.JTable();
        labelErrorName = new javax.swing.JLabel();
        labelErrorValue = new javax.swing.JLabel();
        buttonPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Results");

        panelBackground.setBackground(new java.awt.Color(253, 253, 253));
        panelBackground.setForeground(new java.awt.Color(0, 0, 0));

        tabbedPane1Background.setBackground(new java.awt.Color(253, 253, 253));
        tabbedPane1Background.setForeground(new java.awt.Color(0, 0, 0));
        tabbedPane1Background.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N

        panelPlot.setBackground(new java.awt.Color(253, 253, 253));

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 426, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelPlotLayout = new javax.swing.GroupLayout(panelPlot);
        panelPlot.setLayout(panelPlotLayout);
        panelPlotLayout.setHorizontalGroup(
            panelPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelPlotLayout.setVerticalGroup(
            panelPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPlotLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane1Background.addTab("Plot", panelPlot);

        panelTable.setBackground(new java.awt.Color(253, 253, 253));

        tableScrollPaneOutput.setBackground(new java.awt.Color(253, 253, 253));
        tableScrollPaneOutput.setForeground(new java.awt.Color(0, 0, 0));
        tableScrollPaneOutput.setOpaque(false);

        tableResults.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        tableResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Scale", "Temperature", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableResults.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tableResultsChange(evt);
            }
        });
        tableScrollPaneOutput.setViewportView(tableResults);
        tableResults.getColumnModel().getColumn(0).setCellEditor(MainWindow.SCALES_EDITOR);
        tableResults.getTableHeader().setFont(new java.awt.Font("Ubuntu Light", 0, 24));

        javax.swing.GroupLayout panelTableLayout = new javax.swing.GroupLayout(panelTable);
        panelTable.setLayout(panelTableLayout);
        panelTableLayout.setHorizontalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(tableScrollPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE))
        );
        panelTableLayout.setVerticalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(tableScrollPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE))
        );

        tabbedPane1Background.addTab("Table", panelTable);

        labelErrorName.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        labelErrorName.setText("Error:");

        labelErrorValue.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        labelErrorValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelErrorValue.setText(" ");
        labelErrorValue.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonPrint.setBackground(new java.awt.Color(255, 255, 255));
        buttonPrint.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        buttonPrint.setForeground(new java.awt.Color(0, 0, 0));
        buttonPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/boundary/print.png"))); // NOI18N
        buttonPrint.setText("Print");
        buttonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printAll(evt);
            }
        });

        javax.swing.GroupLayout panelBackgroundLayout = new javax.swing.GroupLayout(panelBackground);
        panelBackground.setLayout(panelBackgroundLayout);
        panelBackgroundLayout.setHorizontalGroup(
            panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane1Background)
                    .addGroup(panelBackgroundLayout.createSequentialGroup()
                        .addComponent(labelErrorName)
                        .addGap(18, 18, 18)
                        .addComponent(labelErrorValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonPrint)))
                .addContainerGap())
        );
        panelBackgroundLayout.setVerticalGroup(
            panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelErrorName)
                    .addComponent(labelErrorValue)
                    .addComponent(buttonPrint))
                .addGap(33, 33, 33)
                .addComponent(tabbedPane1Background)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Ensures that the number shown in the table corresponds with the scale.
     * <p/>
     * @param evt Unused paramter.
     */
    private void tableResultsChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tableResultsChange
        for (int i = 0; i < tableResults.getRowCount(); i++) {
            String scale = (String) tableResults.getValueAt(i, 0);
            double temperature = result.get(i).getForecast();

            switch (scale) {
                case "°C (Celsius)": //convert Kelvin to Celsius
                    temperature -= 273.15;
                    break;
                case "°F (Fahrenheit)": //convert Kelvin to Fahrenheit
                    temperature = temperature * 9.0 / 5.0 - 459.67;
                    break;
                case "°R (Rankine)": //convert Kelvin to Rankine
                    temperature = temperature * 9.0 / 5.0;
                    break;
                case "°K (Kelvin)": //Do nothing
                    break;
            }

            tableResults.setValueAt(temperature, i, 1);
        }
    }//GEN-LAST:event_tableResultsChange

    /**
     * Sends the plot's image, the error and the table values to a PDF file.
     * <p/>
     * @param evt Ignored
     */
    private void printAll(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printAll
        LinkedList<Forecast> forecastsPrint = new LinkedList<>();
        
        for (Forecast forecast : result) {
            double temperature = forecast.getForecast();
            
            switch (forecast.getScale()) {
                case CELSIUS: //convert Kelvin to Celsius
                    temperature -= 273.15;
                    break;
                case FAHRENHEIT: //convert Kelvin to Fahrenheit
                    temperature = temperature * 9.0 / 5.0 - 459.67;
                    break;
                case RANKINE: //convert Kelvin to Rankine
                    temperature = temperature * 9.0 / 5.0;
                    break;
                case KELVIN: //Do nothing
                    break;
            }
            
            Forecast forecastPrint = new Forecast(forecast.getDate(), temperature,
                    forecast.getScale());
            forecastsPrint.add(forecastPrint);
        }
        
        ControlPrint.print(dataDispertion, forecastsPrint, temperaturePlot.
                createBufferedImage(640, 480));
    }//GEN-LAST:event_printAll

    /**
     * Empty the value in the error label, empty the table and reset the plot.
     */
    public void clear() {
        labelErrorValue.setText("");
        DefaultTableModel modelTable = (DefaultTableModel) tableResults.
                getModel();

        while (modelTable.getRowCount() > 0) {
            modelTable.removeRow(0);
        }

        series.removeAllSeries();
        temperaturePlot.fireChartChanged();
    }

    /**
     * Prepare the data to show in the Plot and the table.
     * <br>
     * <br>
     * The table shows only the forecasts. But the graph plots the known and the
     * forecasts, each one apart. Besides it shows the error.
     * <p/>
     * @param dataDispertion Error in the data.
     * @param result         A List with the Forecast.
     * @param dataList       A List with the input values.
     * <p/>
     * @throws NullPointerException When a forecast is or has a null value.
     */
    public void showForecast(double dataDispertion, List<Forecast> result,
            List<Forecast> dataList) {
        clear();
        this.dataDispertion = dataDispertion;
        this.result = result;
        this.dataList = dataList;

        XYSeries seriesPast = new XYSeries("Known Temperatures");
        XYSeries seriesFuture = new XYSeries("Forecasted Temperatures");

        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/YYYY");
        XYPlot plot = (XYPlot) temperaturePlot.getPlot();
        String[] dateLabels;
        List<String> labelsList = new LinkedList<>();
        int iterator = 0;

        for (Forecast forecast : dataList) {
            String dateLabel = formatter.format(forecast.getDate());
            labelsList.add(dateLabel);
            seriesPast.add(iterator++, forecast.getForecast());
        }

        for (Forecast forecast : result) {
            String dateLabel = formatter.format(forecast.getDate());
            Scale scale = forecast.getScale();
            double temperature = forecast.getForecast();

            switch (scale) {
                case CELSIUS: //convert Kelvin to Celsius
                    temperature -= 273.15;
                    break;
                case FAHRENHEIT: //convert Kelvin to Fahrenheit
                    temperature = temperature * 9.0 / 5.0 - 459.67;
                    break;
                case RANKINE: //convert Kelvin to Rankine
                    temperature = temperature * 9.0 / 5.0;
                    break;
                case KELVIN: //Do nothing
                    break;
            }
            
            ((DefaultTableModel) tableResults.getModel()).addRow(new Object[] {
                scale.toString() + " (" + scale.getLongName() + ")",
                temperature,
                dateLabel
            });

            labelsList.add(dateLabel);
            seriesFuture.add(iterator++, forecast.getForecast());
        }

        series.addSeries(seriesPast);
        series.addSeries(seriesFuture);

        dateLabels = new String[labelsList.size()];
        labelsList.toArray(dateLabels);
        SymbolAxis xAxis = new SymbolAxis("Dates", dateLabels);
        xAxis.setTickUnit(new NumberTickUnit(1));
        plot.setDomainAxis(xAxis);
        temperaturePlot.fireChartChanged();

        labelErrorValue.setText((dataDispertion * 100) + "%");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info
                    : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultsWindow.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultsWindow.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultsWindow.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultsWindow.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ResultsWindow resultsWindow = new ResultsWindow();
                resultsWindow.setVisible(true);
                List<Forecast> result = new LinkedList<>();
                List<Forecast> data = new LinkedList<>();
                GregorianCalendar calendar = new GregorianCalendar(2000, 1, 1);

                for (int i = 0; i < 5; i++) {
                    result.add(new Forecast(calendar.getTime(), 25 + i,
                            Scale.FAHRENHEIT));
                    calendar.add(Calendar.DAY_OF_YEAR, 1);
                }

                calendar.add(Calendar.DAY_OF_YEAR, -1);

                for (int i = 0; i < 5; i++) {
                    data.add(new Forecast(calendar.getTime(), 35 - i,
                            Scale.FAHRENHEIT));
                    calendar.add(Calendar.DAY_OF_YEAR, 1);
                }

                resultsWindow.showForecast(0.16, result, data);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonPrint;
    private javax.swing.JPanel chartPanel;
    private javax.swing.JLabel labelErrorName;
    private javax.swing.JLabel labelErrorValue;
    private javax.swing.JPanel panelBackground;
    private javax.swing.JPanel panelPlot;
    private javax.swing.JPanel panelTable;
    private javax.swing.JTabbedPane tabbedPane1Background;
    private javax.swing.JTable tableResults;
    private javax.swing.JScrollPane tableScrollPaneOutput;
    // End of variables declaration//GEN-END:variables
}
